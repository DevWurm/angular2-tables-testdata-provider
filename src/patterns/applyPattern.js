/**
 * applies a set of rules to a pattern, to generate all wanted idetifiers
 * @access private
 * @param pattern {String / [String]} pattern or array of patterns which will be applied
 * @param rules {[Object]} array of rule objects. Each rule object needs a variable field and either a from and to property or a values array ( is split into rule and rules)
 *
 * @return {[String]} Array of result identifiers
 */
export default function applyPattern(pattern, [rule, ...rules]) {
    const patterns = (pattern instanceof Array) ? pattern : [pattern];

    if (!rule) return patterns;

    return applyPattern(patterns.map(pattern => applyRule(pattern, rule)), rules);
}

/**
 * applies a specific rule to a pattern
 * @access public
 * @param pattern {String} pattern, which will be applied
 * @param rule {Object} rule object, which will be applied. The rule object needs a variable field and either a from and to property or a values array 
 *
 * @return {[String]} The array of identifiers generated by this rule from the pattern
 */
export function applyRule(pattern, {variable, from, to, values, padChar}) {
   const regExp = new RegExp(`(${variable}+)`, 'g');

   const vals = (!values) ? new Array(Number(to) - Number(from)).map((val, key) => Number(from) + key) : values;

   return vals.map(val => {
        let result = ""
        
        let chunk = pattern;
        while (const match = regExp.exec(chunk)) {
            result += chunk.substr(0, match.index) + pad(val, match[1].length) + chunk.substr(match.index + match[1].length, (match.lastIndex) ? match.lastIndex : undefined);
            chunk = (match.lastIndex) ? chunk.substr(match.lastIndex) : "";
        }
        
        return result;
   }
}

/**
 * padds a String with preceeding characters, until it has the correct length
 * @access private
 * @param value {String} value, which will be padded
 * @param length {Integer} target length of the value
 * @param padChar {Character (String)} [Optional] character which will be used for padding (default: 0)
 *
 * @return {String} padded value
 */
function pad(value, length, padChar='0') {
        return (value.toString().length < length) ? pad(padChar + value, length):value;
}
